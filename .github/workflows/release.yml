name: release

# Refer to https://help.github.com/en/articles/workflow-syntax-for-github-actions for documentation on Actions.
on:
  release:
    types:
      - released

jobs:
  # Generate a static build artifact for usage in deployments.
  assets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: olafurpg/setup-scala@v10
        with:
          java-version: graalvm@19.3.1
      - uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}

      # Cache docker layers by pulling down the base image first, and then activating
      # caching (keeps the cache small).
      - run: docker pull oracle/graalvm-ce:19.3.1-java11
      - uses: satackey/action-docker-layer-caching@v0.0.8
      - name: "Build asset"
        uses: ./.github/actions/build-asset

      # NOTE: Artifacts are not available across workflows.
      - uses: actions/upload-artifact@v2
        with:
          name: bootstrap
          path: ./dist/bootstrap
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    name: "deploy release"
    needs: [assets]
    environment:
      name: production

    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js 14.12.0
        uses: actions/setup-node@v1
        with:
          node-version: "14.12.0"

      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-
      - name: "Setup node dependencies"
        uses: ./.github/actions/setup-node-deps

      - uses: actions/download-artifact@v2
        with:
          name: bootstrap
          path: ./dist

      - name: Deploy
        if: env.AWS_ACCESS_KEY_ID && env.AWS_SECRET_ACCESS_KEY
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.RELEASE_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.RELEASE_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.RELEASE_AWS_REGION }}
          CI: "true"
        run: |
          npm run cdk:deploy
